目的:
もっとも直近にアクセスされた上位 X 個の <URL, Web ページ> の組が保存できるデータ構造を作る

基本となる発想:
ハッシュテーブルと連結リストで実装したキューを組み合わせる

この発想に至った経緯:
キャッシュの動きは、先に入れた要素が最初に出てくる「FIFO」なので、キューを使えば実装できると考えた。
連結リストに、キャッシュのキーの部分だけを持たせることによって、キーとバリューのペアはハッシュテーブルで管理し、キーの入れた順番はキューで管理することができる。

データ構造の操作の詳細:
ハッシュテーブル:keyにはurlをハッシュ化したもの、valueにはkeyのurlがさすページの内容とそのデータのオブジェクトを入れる
キュー:双方向連結リストを用いて実装し、ノードにはハッシュ化したurlの値を入れる。

このデータ構造が行う動作:
①探しているkeyがハッシュテーブルにあるか検索し、あったらそのvalueを返し、キューの中のそのkeyをキューのキューの先頭に持って来る。
②①でもしもなかった場合は二つのパターンに分かれる
    1. keyを入れてもキャッシュに入っている(key,value)の個数がキャッシュの大きさの最大値を超えない時
    　　ハッシュテーブルとキューの最後尾に、それぞれ値を追加する
    2. keyを入れるとキャッシュに入っている(key,value)の個数がキャッシュの大きさの最大値を超えてしまう時
    　　ハッシュテーブルからキューの先端の要素を削除し、キューからも削除する。その後ハッシュテーブルとキューの最後尾に、それぞれ新しい値を追加する

備考:
キャッシュの大きさは一定なため、元のHash_Tableのre_hashとcheck_sizeは実行されないようにした。